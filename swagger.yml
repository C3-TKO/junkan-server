swagger: '2.0'
info:
  description: |
    This is the api specification for the [junkan-server](https://github.com/C3-TKO/junkan-server).
  version: 1.1.0
  title: Junkan Server
  contact:
    email: thomas.kolar@gmail.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
basePath: /
tags:
  - name: scraper
    description: Everything about junkan website scraper services
schemes:
  - http
  - https
produces:
  - application/vnd.api+json
paths:
  '/title/{url}':
    get:
      tags:
        - scraper
      summary: Get title of the html document at given url
      description: Returns a website's title
      parameters:
        - $ref: '#/parameters/url'
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/title'
        400:
          $ref: '#/responses/400'
        500:
          $ref: '#/responses/500'
        502:
          $ref: '#/responses/502'
        504:
          $ref: '#/responses/504'
  '/html/{url}':
    get:
      tags:
        - scraper
      summary: Get html code of a website
      description: Returns a website's html code
      parameters:
        - $ref: '#/parameters/url'
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/code'
        400:
          $ref: '#/responses/400'
        500:
          $ref: '#/responses/500'
        502:
          $ref: '#/responses/502'
        504:
          $ref: '#/responses/504'
  '/screenshot/{url}':
    get:
      tags:
        - scraper
      summary: Gets screenshot of a website
      description: Returns a screenshot of a website
      parameters:
        - $ref: '#/parameters/url'
        - $ref: '#/parameters/width'
        - $ref: '#/parameters/height'
      produces:
        - image/png
      responses:
        200:
          description: Screenshot operation successful
        400:
          $ref: '#/responses/400'
        500:
          $ref: '#/responses/500'
        502:
          $ref: '#/responses/502'
        504:
          $ref: '#/responses/504'
definitions:
  title:
    type: object
    properties:
      title:
        type: string
  code:
    type: object
    properties:
      code:
        type: string
  error:
    type: object
    required:
      - status
      - title
    properties:
      status:
        description: HTTP status code of the error
        type: integer
      title:
        description: HTTP status name of the error
        type: string
      detail:
        description: Optional detailed description of the error
        type: string
  errors:
    type: array
    description: This contains all errors that occured during request execution
    items:
      $ref: '#/definitions/error'
parameters:
  url:
    in: path
    name: url
    required: true
    type: string
    description: Urlencoded URL of a website
  width:
    in: query
    name: width
    required: false
    default: 1920
    type: integer
    description: Width of the viewport for the screenshot
  height:
    in: query
    name: height
    required: false
    default: 1080
    type: integer
    description: Height of the viewport for the screenshot
responses:
  400:
    description: Bad Request
    schema:
      type: object
      properties:
        errors:
          $ref: '#/definitions/errors'
  500:
    description: Internal Server Error
    schema:
      type: object
      properties:
        errors:
          $ref: '#/definitions/errors'
  502:
    description: Bad Gateway
    schema:
      type: object
      properties:
        errors:
          $ref: '#/definitions/errors'
  504:
    description: Gateway Timeout
    schema:
      type: object
      properties:
        errors:
          $ref: '#/definitions/errors'